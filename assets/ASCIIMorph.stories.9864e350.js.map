{"version":3,"file":"ASCIIMorph.stories.9864e350.js","sources":["../../src/lib/AsciiMorph.js","../../src/components/ASCIIMorph/ASCIIMorph.jsx"],"sourcesContent":["/**\n * Ascii Morph\n * @author: Tim Holman (http://tholman.com)\n */\n'use strict'\n\nexport const AsciiMorph = ({\n  element,\n  canvasSize: canvasDimensions,\n  renderedData = [],\n  framesToAnimate = [],\n  myTimeout,\n}) => {\n  /**\n   * Utils\n   */\n  const extend = (target, source) => {\n    for (var key in source) {\n      if (!(key in target)) {\n        target[key] = source[key]\n      }\n    }\n    return target\n  }\n\n  const repeat = (pattern, count) => {\n    if (count < 1) return ''\n    var result = ''\n    while (count > 1) {\n      if (count & 1) result += pattern\n      ;(count >>= 1), (pattern += pattern)\n    }\n    return result + pattern\n  }\n\n  const replaceAt = (string, index, character) => {\n    return (\n      string.substr(0, index) +\n      character +\n      string.substr(index + character.length)\n    )\n  }\n\n  /**\n   * AsciiMorph\n   */\n\n  const squareOutData = (data) => {\n    var i\n    var renderDimensions = {\n      x: 0,\n      y: data.length,\n    }\n\n    // Calculate centering numbers\n    for (i = 0; i < data.length; i++) {\n      if (data[i].length > renderDimensions.x) {\n        renderDimensions.x = data[i].length\n      }\n    }\n\n    // Pad out right side of data to square it out\n    for (i = 0; i < data.length; i++) {\n      if (data[i].length < renderDimensions.x) {\n        data[i] = data[i] + repeat(' ', renderDimensions.x - data[i].length)\n      }\n    }\n\n    var paddings = {\n      x: Math.floor((canvasDimensions.x - renderDimensions.x) / 2),\n      y: Math.floor((canvasDimensions.y - renderDimensions.y) / 2),\n    }\n\n    // Left Padding\n    for (var i = 0; i < data.length; i++) {\n      data[i] = repeat(' ', paddings.x) + data[i] + repeat(' ', paddings.x)\n    }\n\n    // Pad out the rest of everything\n    for (var i = 0; i < canvasDimensions.y; i++) {\n      if (i < paddings.y) {\n        data.unshift(repeat(' ', canvasDimensions.x))\n      } else if (i > paddings.y + renderDimensions.y) {\n        data.push(repeat(' ', canvasDimensions.x))\n      }\n    }\n\n    return data\n  }\n\n  // Crushes the frame data by 1 unit.\n  const getMorphedFrame = (data) => {\n    var firstInLine,\n      lastInLine = null\n    var found = false\n    for (var i = 0; i < data.length; i++) {\n      var line = data[i]\n      firstInLine = line.search(/\\S/)\n      if (firstInLine === -1) {\n        firstInLine = null\n      }\n\n      for (var j = 0; j < line.length; j++) {\n        if (line[j] != ' ') {\n          lastInLine = j\n        }\n      }\n\n      if (firstInLine !== null && lastInLine !== null) {\n        data = crushLine(data, i, firstInLine, lastInLine)\n        found = true\n      }\n\n      ;(firstInLine = null), (lastInLine = null)\n    }\n\n    if (found) {\n      return data\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * crushLine\n   * @param {*} data\n   * @param {*} line\n   * @param {*} start\n   * @param {*} end\n   * @returns\n   */\n  const crushLine = (data, line, start, end) => {\n    var centers = {\n      x: Math.floor(canvasDimensions.x / 2),\n      y: Math.floor(canvasDimensions.y / 2),\n    }\n\n    var crushDirection = 1\n    if (line > centers.y) {\n      crushDirection = -1\n    }\n\n    var charA = data[line][start]\n    var charB = data[line][end]\n\n    data[line] = replaceAt(data[line], start, ' ')\n    data[line] = replaceAt(data[line], end, ' ')\n\n    if (!(end - 1 == start + 1) && !(start === end) && !(start + 1 === end)) {\n      data[line + crushDirection] = replaceAt(\n        data[line + crushDirection],\n        start + 1,\n        '+*/\\\\'.substr(Math.floor(Math.random() * '+*/\\\\'.length), 1)\n      )\n      data[line + crushDirection] = replaceAt(\n        data[line + crushDirection],\n        end - 1,\n        '+*/\\\\'.substr(Math.floor(Math.random() * '+*/\\\\'.length), 1)\n      )\n    } else if (\n      (start === end || start + 1 === end) &&\n      line + 1 !== centers.y &&\n      line - 1 !== centers.y &&\n      line !== centers.y\n    ) {\n      data[line + crushDirection] = replaceAt(\n        data[line + crushDirection],\n        start,\n        '+*/\\\\'.substr(Math.floor(Math.random() * '+*/\\\\'.length), 1)\n      )\n      data[line + crushDirection] = replaceAt(\n        data[line + crushDirection],\n        end,\n        '+*/\\\\'.substr(Math.floor(Math.random() * '+*/\\\\'.length), 1)\n      )\n    }\n\n    return data\n  }\n\n  /**\n   * renderSquareData\n   * @param {*} data\n   */\n  const renderSquareData = (el, data) => {\n    el.innerHTML = ''\n    for (var i = 0; i < data.length; i++) {\n      el.innerHTML = el.innerHTML + data[i] + '\\n'\n    }\n\n    renderedData = data\n  }\n\n  /**\n   * render\n   * @param {*} data\n   */\n  const render = (el, data) => {\n    var ourData = squareOutData(data.slice())\n    renderSquareData(el, ourData)\n  }\n\n  /**\n   * Morph between whatever is current, to the new frame\n   * @param {*} data\n   */\n  const morph = (el, data) => {\n    clearTimeout(myTimeout)\n    var frameData = prepareFrames(data.slice())\n    animateFrames(el, frameData)\n  }\n\n  /**\n   * prepareFrames\n   * @param {*} data\n   * @returns\n   */\n  const prepareFrames = (data) => {\n    var deconstructionFrames = []\n    var constructionFrames = []\n\n    var clonedData = renderedData\n\n    // If its taking more than 100 frames, its probably somehow broken\n    // Get the deconscrution frames\n    for (var i = 0; i < 100; i++) {\n      var newData = getMorphedFrame(clonedData)\n      if (newData === false) {\n        break\n      }\n      deconstructionFrames.push(newData.slice(0))\n      clonedData = newData\n    }\n\n    // Get the constuction frames for the new data\n    var squareData = squareOutData(data)\n    constructionFrames.unshift(squareData.slice(0))\n    for (var i = 0; i < 100; i++) {\n      var newData = getMorphedFrame(squareData)\n      if (newData === false) {\n        break\n      }\n      constructionFrames.unshift(newData.slice(0))\n      squareData = newData\n    }\n\n    return deconstructionFrames.concat(constructionFrames)\n  }\n\n  const animateFrames = (element, frameData) => {\n    framesToAnimate = frameData\n    animateFrame(element)\n  }\n\n  const animateFrame = (element) => {\n    myTimeout = setTimeout(() => {\n      renderSquareData(element, framesToAnimate[0])\n      framesToAnimate.shift()\n      if (framesToAnimate.length > 0) {\n        animateFrame()\n      }\n    }, 20)\n\n    // framesToAnimate\n  }\n\n  if (!element || !canvasDimensions) {\n    console.log('sorry, I need an element and a canvas size')\n    return null\n  }\n\n  return {\n    render,\n    morph,\n  }\n}\n\nexport default AsciiMorph\n","/**\n * @file ASCIIMorph.js\n * @see https://codepen.io/tholman/pen/BQLQyo\n */\nimport { useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport s from './ASCIIMorph.module.css'\n\nimport AsciiMorph from '../../lib/AsciiMorph'\n\nconst ASCIIMorph = ({\n  tagName: Tag = 'div',\n  className = '',\n  variant = 'default',\n  children = '',\n  asciis = [\n    [\n      '                _ooOoo_',\n      '               o8888888o',\n      '               88\" . \"88',\n      '               (| -_- |)',\n      '               O\\\\  =  /O',\n      \"            ____/`---'\\\\____\",\n      \"          .'  \\\\\\\\|     |//  `.\",\n      '         /  \\\\\\\\|||  :  |||//  \\\\',\n      '        /  _||||| -:- |||||_  \\\\',\n      \"        |   | \\\\\\\\\\\\  -  /'| |   |\",\n      \"        | \\\\_|  `\\\\`---'//  |_/ |\",\n      \"        \\\\  .-\\\\__ `-. -'__/-.  /\",\n      \"      ___`. .'  /--.--\\\\  `. .'___\",\n      '   .\"\" \\'<  `.___\\\\_<|>_/___.\\' _> \\\\\"\".',\n      \"  | | :  `- \\\\`. ;`. _/; .'/ /  .' ; |\",\n      \"  \\\\  \\\\ `-.   \\\\_\\\\_`. _.'_/_/  -' _.' /\",\n      \"===`-.`___`-.__\\\\ \\\\___  /__.-'_.'_.-'===\",\n      \"                `=--=-'    \",\n    ],\n\n    [\n      '                             /',\n      '                            /',\n      '                           /;',\n      '                          //',\n      '                         ;/',\n      '                       ,//',\n      \"                   _,-' ;_,,\",\n      \"                _,'-_  ;|,'\",\n      \"            _,-'_,..--. |\",\n      \"    ___   .'-'_)'  ) _)\\\\|      ___\",\n      \"  ,'\\\"\\\"\\\"`'' _  )   ) _)  ''--'''_,-'\",\n      \"-={-o-  /|    )  _)  ) ; '_,--''\",\n      \"  \\\\ -' ,`.  ) .)  _)_,''|\",\n      \"   `.\\\"(   `------''     /\",\n      \"     `.\\\\             _,'\",\n      '       `-.____....-\\\\\\\\',\n      '                 || \\\\\\\\',\n      '                 // ||',\n      '                //  ||',\n      '            _-.//_ _||_,',\n      \"              ,'  ,-'/\",\n    ],\n\n    [\n      '      \\\\`.     ___',\n      '       \\\\ \\\\   / __>0',\n      \"   /\\\\  /  |/' / \",\n      \"  /  \\\\/   `  ,`'--.\",\n      ' / /(___________)_ \\\\',\n      ' |/ //.-.   .-.\\\\\\\\ \\\\ \\\\',\n      ' 0 // :@ ___ @: \\\\\\\\ /',\n      '   ( o ^(___)^ o ) 0',\n      '    \\\\ \\\\_______/ /',\n      \"/\\\\   '._______.'--.\",\n      '\\\\ /|  |<_____>    |',\n      ' \\\\ \\\\__|<_____>____/|__',\n      '  \\\\____<_____>_______/',\n      '      |<_____>    |',\n      '      |<_____>    |',\n      '      :<_____>____:',\n      '     / <_____>   /|',\n      '    /  <_____>  / |',\n      '   /___________/  |',\n      '   |           | _|__',\n      '   |           | ---||_',\n      '   |   |L\\\\/|/  |  | [__]',\n      '   |  \\\\|||\\\\|\\\\  |  /',\n      '   |           | /',\n      '   |___________|/',\n    ],\n\n    [\n      '     .--------.',\n      '    / .------. \\\\',\n      '   / /        \\\\ \\\\',\n      '   | |        | |',\n      '  _| |________| |_',\n      \".' |_|        |_| '.\",\n      \"'._____ ____ _____.'\",\n      \"|     .'____'.     |\",\n      \"'.__.'.'    '.'.__.'\",\n      \"'.__  |      |  __.'\",\n      \"|   '.'.____.'.'   |\",\n      \"'.____'.____.'____.'\",\n      \"'.________________.'\",\n    ],\n\n    [\n      '         ____',\n      '        o8%8888,',\n      '      o88%8888888.',\n      \"     8'-    -:8888b\",\n      \"    8'         8888\",\n      '   d8.-=. ,==-.:888b',\n      \"   >8 `~` :`~' d8888\",\n      '   88         ,88888',\n      \"   88b. `-~  ':88888\",\n      '   888b ~==~ .:88888',\n      \"   88888o--:':::8888\",\n      \"   `88888| :::' 8888b\",\n      \"   8888^^'       8888b\",\n      '  d888           ,%888b.',\n      \" d88%            %%%8--'-.\",\n      \"/88:.__ ,       _%-' ---  -\",\n      \"    '''::===..-'   =  --.  `\",\n    ],\n\n    [\n      '      _      _      _',\n      '   __(.)< __(.)> __(.)=',\n      '   \\\\___)  \\\\___)  \\\\___)  ',\n      '          _      _      _',\n      '       __(.)< __(.)> __(.)=',\n      '       \\\\___)  \\\\___)  \\\\___)   ',\n      '      _      _      _',\n      '   __(.)< __(.)> __(.)=',\n      '   \\\\___)  \\\\___)  \\\\___)   ',\n      '          _      _      _',\n      '       __(.)< __(.)> __(.)=',\n      '       \\\\___)  \\\\___)  \\\\___)  ',\n    ],\n  ],\n}) => {\n  const element = useRef()\n  let index = useRef(2)\n\n  useEffect(() => {\n    const int = setInterval(() => {\n      AsciiMorph.morph(asciis[index])\n      index.current += 1\n      index.current %= asciis.length\n      console.log('index', index.current)\n    }, 3000)\n\n    AsciiMorph(element.current, { x: 51, y: 28 })\n\n    AsciiMorph.render(element.current, asciis[0])\n\n    setTimeout(() => {\n      AsciiMorph.morph(element.current, asciis[1])\n    }, 1000)\n\n    return () => clearInterval(int)\n  }, [asciis])\n\n  return (\n    <Tag\n      className={`${s.a_s_c_i_i_morph} ${\n        s[`a_s_c_i_i_morph__${variant}`]\n      } ${className}`}\n    >\n      <pre\n        ref={element}\n        className=\"morph-section absolute text-white font-mono left-[50%] top-[50%] mt-[-200px] ml-[-200px] w-[400px] h-[400px]\"\n      ></pre>\n    </Tag>\n  )\n}\n\nASCIIMorph.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nexport default ASCIIMorph\n"],"names":["AsciiMorph","__name","element","canvasDimensions","renderedData","framesToAnimate","myTimeout","repeat","pattern","count","result","replaceAt","string","index","character","squareOutData","data","i","renderDimensions","paddings","getMorphedFrame","firstInLine","lastInLine","found","line","j","crushLine","start","end","centers","crushDirection","renderSquareData","el","render","ourData","morph","frameData","prepareFrames","animateFrames","deconstructionFrames","constructionFrames","clonedData","newData","squareData","animateFrame","ASCIIMorph","tagName","Tag","className","variant","children","asciis","useRef","useEffect","int","setInterval","current","length","log","setTimeout","clearInterval","s","a_s_c_i_i_morph","propTypes","PropTypes","oneOf","node","ASCIIMorph$1"],"mappings":"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C,EAAc,CAEjB,EAAE,EAAE,CAGN,EAVoB,gBAYrB,MAAI,CAAC1C,GAAW,CAACC,GACf,QAAQ,IAAI,4CAA4C,EACjD,MAGF,CACL,OAAA8B,EACA,MAAAE,CACD,CACH,EA7Q0B,cCK1BU,EAAA5C,EAAA,CAAA,CACA6C,QAAAC,EAAA,MACAC,UAAAA,EAAA,GACAC,QAAAA,EAAA,UACAC,SAAAA,EAAA,GACAC,OAAAA,EAAA,CACA,CACA,0BACA,2BACA,2BACA,2BACA,4BACA,+BACA,kCACA,oCACA,mCACA,qCACA,oCACA,oCACA,qCACA,0CACA,yCACA,4CACA,4CACA,6BAAA,EAGA,CACA,iCACA,gCACA,gCACA,+BACA,8BACA,6BACA,+BACA,8BACA,4BACA,sCACA,uCACA,mCACA,6BACA,6BACA,4BACA,0BACA,2BACA,yBACA,yBACA,2BACA,wBAAA,EAGA,CACA,qBACA,wBACA,oBACA,uBACA,wBACA,4BACA,yBACA,uBACA,sBACA,uBACA,uBACA,2BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,0BACA,4BACA,yBACA,qBACA,mBAAA,EAGA,CACA,kBACA,oBACA,sBACA,oBACA,qBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,sBAAA,EAGA,CACA,gBACA,mBACA,qBACA,sBACA,sBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,wBACA,yBACA,2BACA,6BACA,8BACA,8BAAA,EAGA,CACA,wBACA,0BACA,8BACA,4BACA,8BACA,mCACA,wBACA,0BACA,+BACA,4BACA,8BACA,iCAAA,CACA,CAEA,IAAA,CACA,MAAAjD,EAAAkD,EAAAA,QAAAA,SACAvC,IAAAA,EAAAuC,iBAAA,CAAA,EAEAC,OAAAA,EAAAA,QAAAA,UAAA,IAAA,CACAC,MAAAA,EAAAC,YAAA,IAAA,CACApB,EAAAA,MAAAgB,EAAAtC,EAAA,EACAA,EAAA2C,SAAA,EACA3C,EAAA2C,SAAAL,EAAAM,OACAC,QAAAA,IAAA,QAAA7C,EAAA2C,OAAA,GACA,GAAA,EAEAxD,OAAAA,EAAAE,EAAAsD,OAAA,EAEAxD,EAAAiC,OAAA/B,EAAAsD,QAAAL,EAAA,EAAA,EAEAQ,WAAA,IAAA,CACA3D,EAAAmC,MAAAjC,EAAAsD,QAAAL,EAAA,EAAA,GACA,GAAA,EAEA,IAAAS,cAAAN,CAAA,CAAA,EACA,CAAAH,CAAA,CAAA,IAGAJ,EAAA,CACA,UAAA,GAAAc,EAAAC,mBACAD,EAAA,oBAAAZ,QACAD,IAAA,WAEA,MAAA,CACA,IAAA9C,EACA,UAAA,8GAAA,CAAA,CAAA,CAEA,CAEA,EArKA,cAuKA2C,EAAAkB,UAAA,CACAjB,QAAAkB,EAAApD,QAAAA,OACAoC,UAAAgB,EAAApD,QAAAA,OACAqC,QAAAe,EAAAA,QAAAC,MAAA,CAAA,SAAA,CAAA,EACAf,SAAAc,EAAAE,QAAAA,IACA,EAEA,MAAAC,EAAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}