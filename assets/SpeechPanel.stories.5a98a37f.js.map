{"version":3,"file":"SpeechPanel.stories.5a98a37f.js","sources":["../../src/components/SpeechPanel/SpeechPanel.jsx"],"sourcesContent":["/**\n * @file SpeechPanel.js\n */\nimport { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { motion, AnimatePresence } from 'framer-motion'\n\nimport s from './SpeechPanel.module.css'\n\nconst ButtonSpeakBackground = ({ onAnimationComplete }) => {\n  return (\n    <motion.div\n      initial={{\n        scale: 1,\n      }}\n      animate={{\n        scale: 100,\n      }}\n      exit={{\n        scale: 1,\n      }}\n      transition={{\n        duration: 1,\n        ease: [0.4, 0.0, 0.2, 1.0],\n      }}\n      onAnimationComplete={onAnimationComplete}\n      className={`fixed origin-center transition-all ease-out h-[84px] w-[84px] right-12 bottom-12 rounded-full`}\n    >\n      <div\n        className={`absolute bottom-0 right-0 w-full h-full transition ease-out bg-red-ff dark:bg-blue-500 rounded-full duration-500`}\n      />\n    </motion.div>\n  )\n}\n\nconst SpeechPanel = ({\n  tagName: Tag = 'div',\n  className = 'fixed top-0 left-0 flex items-center justify-center w-screen h-screen overflow-hidden',\n  variant = 'default',\n  active = false,\n  questions = [\n    'Ready to mint?',\n    'Want to read the FAQ?',\n    'Do you like turtles?',\n    'What do you think of NFTs?',\n  ],\n}) => {\n  const [isReady, setIsReady] = useState(false)\n  const onAnimationComplete = useCallback(() => {\n    if (!isReady) {\n      console.log('Animation Start Complete')\n      setIsReady(true)\n    } else {\n      console.log('Animation End Complete')\n      setIsReady(false)\n    }\n  }, [isReady])\n\n  const variants = {\n    hide: { opacity: 0 },\n    show: { opacity: 1 },\n    transition: {\n      duration: 0.5,\n      ease: 'easeOut',\n      staggerChildren: 1.5,\n    },\n  }\n\n  var listVariants = {\n    hide: { opacity: 0 },\n    show: { opacity: 1 },\n    transition: {\n      duration: 1,\n      ease: 'easeOut',\n    },\n  }\n\n  return (\n    <AnimatePresence exitBeforeEnter>\n      {active && (\n        <Tag\n          className={`${s.speech_panel} ${\n            s[`speech_panel__${variant}`]\n          } ${className}`}\n          key=\"speech-panel\"\n        >\n          <ButtonSpeakBackground onAnimationComplete={onAnimationComplete} />\n          <AnimatePresence>\n            {isReady && (\n              <motion.ul\n                initial=\"hide\"\n                animate=\"show\"\n                exit=\"hide\"\n                variants={variants}\n                key=\"question-panel\"\n                layout\n                className=\"relative grid grid-flow-row grid-cols-3 mx-4 text-2xl text-white gap-y-4 gap-x-4\"\n              >\n                {questions.map((question, index) => (\n                  <motion.li\n                    initial=\"hide\"\n                    animate=\"show\"\n                    exit=\"hide\"\n                    variants={listVariants}\n                    key={`q-${index}`}\n                    className=\"flex items-center justify-center px-4 py-2 text-center text-black transition-all duration-500 ease-out drop-shadow-md hover:drop-shadow-2xl backdrop-blur-lg bg-white/90 rounded-2xl\"\n                  >\n                    {question}\n                  </motion.li>\n                ))}\n              </motion.ul>\n            )}\n          </AnimatePresence>\n        </Tag>\n      )}\n    </AnimatePresence>\n  )\n}\n\nSpeechPanel.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nexport default SpeechPanel\n"],"names":["ButtonSpeakBackground","__name","onAnimationComplete","_jsx","motion","scale","duration","ease","SpeechPanel","tagName","Tag","className","variant","active","questions","isReady","setIsReady","useState","useCallback","console","log","variants","hide","opacity","show","transition","staggerChildren","listVariants","AnimatePresence","_jsxs","s","speech_panel","map","question","index","propTypes","PropTypes","string","oneOf","children","node","SpeechPanel$1"],"mappings":"0eASAA,EAAAC,EAAA,CAAA,CAAAC,oBAAAA,CAAA,IAEAC,EAAAC,EAAA,IAAA,CACA,QAAA,CACAC,MAAA,CACA,EACA,QAAA,CACAA,MAAA,GACA,EACA,KAAA,CACAA,MAAA,CACA,EACA,WAAA,CACAC,SAAA,EACAC,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CACA,EACA,oBAAAL,EACA,UAAA,gGAAA,WAEA,MAAA,CACA,UAAA,kHAAA,CAAA,CAAA,CAEA,EAtBA,yBA0BAM,EAAAP,EAAA,CAAA,CACAQ,QAAAC,EAAA,MACAC,UAAAA,EAAA,wFACAC,QAAAA,EAAA,UACAC,OAAAA,EAAA,GACAC,UAAAA,EAAA,CACA,iBACA,wBACA,uBACA,4BAAA,CAEA,IAAA,CACA,KAAA,CAAAC,EAAAC,CAAA,EAAAC,mBAAA,EAAA,EACAf,EAAAgB,EAAAA,QAAAA,YAAA,IAAA,CACAH,GAIAI,QAAAC,IAAA,wBAAA,EACAJ,EAAA,EAAA,IAJAG,QAAAC,IAAA,0BAAA,EACAJ,EAAA,EAAA,EAIA,EACA,CAAAD,CAAA,CAAA,EAEAM,EAAA,CACAC,KAAA,CAAAC,QAAA,CAAA,EACAC,KAAA,CAAAD,QAAA,CAAA,EACAE,WAAA,CACAnB,SAAA,GACAC,KAAA,UACAmB,gBAAA,GACA,CAAA,EAGA,IAAAC,EAAA,CACAL,KAAA,CAAAC,QAAA,CAAA,EACAC,KAAA,CAAAD,QAAA,CAAA,EACAE,WAAA,CACAnB,SAAA,EACAC,KAAA,SACA,CAAA,EAGA,SACAqB,EAAA,CAAA,gBAAA,GAAA,SACAf,GACAgB,EAAAnB,EAAA,CACA,UAAA,GAAAoB,EAAAC,gBACAD,EAAA,iBAAAlB,QACAD,IAAA,SAAA,CAGAR,EAAAH,EAAA,CAAA,oBAAAE,CAAA,CAAA,EACAC,EAAAyB,EAAA,CAAA,SACAb,GACAZ,EAAAC,EAAA,GAAA,CACA,QAAA,OACA,QAAA,OACA,KAAA,OACA,SAAAiB,EAEA,OAAA,GACA,UAAA,mFAAA,SAEAP,EAAAkB,IAAA,CAAAC,EAAAC,IACA/B,EAAAC,EAAA,GAAA,CACA,QAAA,OACA,QAAA,OACA,KAAA,OACA,SAAAuB,EAEA,UAAA,uLAAA,SAEAM,CAAA,EAHA,KAAAC,GAAA,CAKA,GAfA,gBAAA,CAAA,CAkBA,CAAA,GA5BA,cAAA,CAAA,CA+BA,CAEA,EAlFA,eAoFA1B,EAAA2B,UAAA,CACA1B,QAAA2B,EAAAC,QAAAA,OACA1B,UAAAyB,EAAAC,QAAAA,OACAzB,QAAAwB,EAAAA,QAAAE,MAAA,CAAA,SAAA,CAAA,EACAC,SAAAH,EAAAI,QAAAA,IACA,EAEA,MAAAC,EAAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}