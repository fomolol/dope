{"version":3,"file":"Text.stories.0d02170e.js","sources":["../../src/components/Text/SplitFade.jsx","../../src/components/Text/SplitOverflow.jsx","../../src/components/Text/Text.jsx"],"sourcesContent":["/**\n * @file SplitFade\n */\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { motion } from 'framer-motion'\n\nconst SplitFade = ({\n  children,\n  letterWrapperClassname = 'cursor-pointer relative white-space-pre',\n  hiddenLetterClassname = 'opacity-0 invisible',\n  roundLetterClassname = 'inline-block h-full left-0 absolute top-0 origin-right w-full',\n  spaceLetterClassname = 'inline-block font-stolzl h-full left-0 absolute top-0 origin-left w-full',\n}) => {\n  const [isHovered, setIsHovered] = React.useState(false)\n\n  const rounded = {\n    initial: {\n      opacity: 0,\n      transform: 'translateY(0%)',\n    },\n    animate: {\n      opacity: isHovered ? 0 : 1,\n      transform: isHovered ? 'translateY(-50%)' : 'translateY(0%)',\n    },\n    exit: {\n      opacity: 0,\n      transform: 'translateY(0%)',\n    },\n    transition: {\n      ease: 'easeOut',\n      duration: 1,\n    },\n  }\n\n  const square = {\n    initial: {\n      opacity: 0,\n      transform: 'translateY(50%)',\n    },\n    animate: {\n      opacity: isHovered ? 1 : 0,\n      transform: isHovered ? 'translateY(0%)' : 'translateY(50%)',\n    },\n    exit: {\n      opacity: 0,\n      transform: 'translateY(50%)',\n    },\n    transition: {\n      ease: 'easeOut',\n      duration: 0.8,\n    },\n  }\n\n  return (\n    <span className={letterWrapperClassname}>\n      <span className={hiddenLetterClassname}>{children}</span>\n\n      <motion.span\n        className={roundLetterClassname}\n        initial=\"initial\"\n        animate=\"animate\"\n        exit=\"exit\"\n        variants={rounded}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {children}\n      </motion.span>\n\n      <motion.span\n        className={spaceLetterClassname}\n        initial=\"initial\"\n        animate=\"animate\"\n        exit=\"exit\"\n        variants={square}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {children}\n      </motion.span>\n    </span>\n  )\n}\n\nexport default SplitFade\n","/**\n * @file SplitOverflow\n */\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { motion } from 'framer-motion'\n\nconst SplitOverflow = ({\n  children,\n  roundLetterClassname = 'inline-block h-full left-0 absolute top-0 origin-right w-full',\n  spaceLetterClassname = 'inline-block font-stolzl h-full left-0 absolute top-0 origin-left w-full',\n  letterWrapperClassname = 'cursor-pointer relative white-space-pre',\n  hiddenLetterClassname = 'opacity-0 invisible',\n}) => {\n  const [isHovered, setIsHovered] = React.useState(false)\n\n  const rounded = {\n    initial: {\n      transform: 'translateY(0%) rotate(0deg)',\n    },\n    animate: {\n      transform: isHovered\n        ? 'translateY(-180%) rotate(-8deg)'\n        : 'translateY(0%) rotate(0deg)',\n    },\n    exit: {\n      transform: 'translateY(0%) rotate(0deg)',\n    },\n    transition: {\n      ease: 'easeOut',\n      duration: 1,\n    },\n  }\n\n  const square = {\n    initial: {\n      transform: 'translateY(100%) rotate(15deg)',\n    },\n    animate: {\n      transform: isHovered\n        ? 'translateY(0%) rotate(0deg)'\n        : 'translateY(100%) rotate(15deg)',\n    },\n    exit: {\n      transform: 'translateY(100%) rotate(15deg)',\n    },\n    transition: {\n      ease: 'easeOut',\n      duration: 0.8,\n    },\n  }\n\n  return (\n    <span className={letterWrapperClassname}>\n      <span className={hiddenLetterClassname}>{children}</span>\n      <span\n        className={`${roundLetterClassname} overflow-hidden w-full h-full`}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <motion.span\n          className={roundLetterClassname}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          variants={rounded}\n          transition={{\n            ease: 'easeOut',\n            duration: 1,\n          }}\n        >\n          {children}\n        </motion.span>\n        <motion.span\n          className={spaceLetterClassname}\n          initial=\"initial\"\n          animate=\"animate\"\n          exit=\"exit\"\n          variants={square}\n          transition={{\n            ease: 'easeOut',\n            duration: 0.8,\n          }}\n          onMouseEnter={() => setIsHovered(true)}\n          onMouseLeave={() => setIsHovered(false)}\n        >\n          {children}\n        </motion.span>\n      </span>\n    </span>\n  )\n}\n\nexport default SplitOverflow\n","/**\n * @file Text.js\n */\nimport * as React from 'react'\nimport PropTypes from 'prop-types'\nimport { useLayoutEffect } from '@fomolol/tacklebox'\n\nimport styles from './Text.module.css'\n\nimport SplitFade from './SplitFade'\nimport SplitOverflow from './SplitOverflow'\n\nconst Text = ({\n  tagName: Tag = 'h2',\n  className = '',\n  variant = 'default',\n  children = '',\n  type,\n}) => {\n  const text = React.useRef()\n  const [newText, setNewText] = React.useState(null)\n  const hasTextSpans = React.useRef(false)\n\n  const innerHtml = React.useRef()\n\n  useLayoutEffect(() => {\n    if (text.current) {\n      innerHtml.current = text.current?.innerHTML.replaceAll('<br>', ' _ ')\n    }\n  }, [text])\n\n  useLayoutEffect(() => {\n    if (\n      innerHtml.current &&\n      !newText &&\n      text.current &&\n      !hasTextSpans.current\n    ) {\n      if (type === 'fade-letter') {\n        const letters = innerHtml.current.split('')\n        setNewText(letters)\n      } else if (type === 'fade-word') {\n        const words = innerHtml.current.split(' ')\n        setNewText(words)\n      } else if (type === 'fade-block') {\n        setNewText('hide children')\n      } else if (type === 'overflow-word') {\n        const words = innerHtml.current.split(' ')\n        setNewText(words)\n      }\n    }\n  }, [text, innerHtml, type])\n\n  const renderText = React.useMemo(\n    () =>\n      newText && type === 'fade-letter' ? (\n        newText?.map((letter, index) => (\n          <React.Fragment key={`fade-letter-${index}`}>\n            {letter === '_' ? <br /> : <SplitFade>{letter || ' '}</SplitFade>}\n          </React.Fragment>\n        ))\n      ) : type === 'fade-word' ? (\n        newText?.map((word, index) => (\n          <React.Fragment key={`fade-word-${index}`}>\n            {word === '_' ? (\n              <br />\n            ) : (\n              <>\n                <SplitFade>{word}</SplitFade>\n                <SplitFade> </SplitFade>\n              </>\n            )}\n          </React.Fragment>\n        ))\n      ) : type === 'fade-block' ? (\n        <SplitFade>{children}</SplitFade>\n      ) : type === 'overflow-word' ? (\n        newText?.map((word, index) => (\n          <React.Fragment key={`overflow-word-${index}`}>\n            {word === '_' ? (\n              <br />\n            ) : (\n              <span>\n                <SplitOverflow>{word}</SplitOverflow>\n                <SplitOverflow> </SplitOverflow>\n              </span>\n            )}\n          </React.Fragment>\n        ))\n      ) : null,\n    [newText, type, children]\n  )\n\n  return (\n    <Tag\n      ref={text}\n      className={`${styles.text} ${styles[`text__${variant}`]} ${className}`}\n    >\n      {!renderText ? children : renderText}\n    </Tag>\n  )\n}\n\nText.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nexport default Text\n"],"names":["SplitFade","__name","children","letterWrapperClassname","hiddenLetterClassname","roundLetterClassname","spaceLetterClassname","isHovered","setIsHovered","React","rounded","initial","opacity","transform","animate","exit","transition","ease","duration","square","_jsx","motion","SplitOverflow","_jsxs","Text","tagName","Tag","className","variant","type","text","newText","setNewText","hasTextSpans","innerHtml","useLayoutEffect","current","innerHTML","replaceAll","letters","split","words","renderText","map","letter","index","React.Fragment","word","_Fragment","styles","propTypes","PropTypes","string","oneOf","node","Text$1"],"mappings":"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"}