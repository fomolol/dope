{"version":3,"file":"ASCIIGalaxy.stories.8993c8a3.js","sources":["../../src/components/ASCIIGalaxy/ASCIIGalaxy.jsx"],"sourcesContent":["/**\n * @file ASCIIGalaxy.js\n */\nimport { useState, useRef, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useWindowSize, useLayoutEffect } from '@fomolol/tacklebox'\n\nimport s from './ASCIIGalaxy.module.css'\n\n/* Scale a value from one range to another\n * Example of use:\n *\n * // Convert 33 from a 0-100 range to a 0-65535 range\n * var n = scaleValue(33, [0,100], [0,65535]);\n *\n * // Ranges don't have to be positive\n * var n = scaleValue(0, [-50,+50], [0,65535]);\n *\n * Ranges are defined as arrays of two values, inclusive\n *\n * The ~~ trick on return value does the equivalent of Math.floor, just faster.\n *\n */\nconst scaleValue = (value, from, to) => {\n  var scale = (to[1] - to[0]) / (from[1] - from[0])\n  var capped = Math.min(from[1], Math.max(from[0], value)) - from[0]\n  return ~~(capped * scale + to[0])\n}\n\nconst ASCIIGalaxy = ({\n  tagName: Tag = 'pre',\n  className = 'absolute top-0 left-0 flex items-center justify-center w-screen h-screen overflow-hidden font-mono text-white opacity-50',\n  variant = 'default',\n  width: tWidth,\n  height: tHeight,\n  stars = 10,\n  trails = 20,\n  ds = ' ',\n}) => {\n  const { height: _height, width: _width } = useWindowSize()\n  const [galaxy, setGalaxy] = useState('')\n\n  const field = useRef([])\n\n  /**\n   * createField\n   */\n  const createField = useCallback(\n    ({ width, height }) => {\n      for (var y = 0; y < height; y++) {\n        field.current[y] = []\n        for (var x = 0; x < width; x++) {\n          field.current[y][x] = ds\n        }\n      }\n    },\n    [field, ds]\n  )\n\n  /**\n   * buildTrail\n   * @param {*} props\n   * @returns\n   */\n  const buildTrail = useCallback(\n    ({ width, height, symbols = ['.', '_', '-', '~', '°', '+'] }) => {\n      try {\n        var ys = Math.floor(Math.random() * height)\n        var xs = Math.floor(Math.random() * width)\n        var len = Math.floor(Math.random() * (width - xs - 1) + 1)\n        var yc = 0\n\n        for (var i = 0; i < len; i++) {\n          var rndSym = Math.floor(Math.random() * symbols.length)\n          var rndY = Math.floor(Math.random() * (3 - 1 + 1)) + 1\n          if (rndY == 1) {\n            yc += 1\n          } else if (rndY == 2) {\n            yc -= 1\n          } else {\n            yc = yc\n          }\n\n          if (ys + yc > height || ys - yc < 0) return\n          try {\n            field.current[ys + yc][xs + i] = symbols[rndSym]\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    [field]\n  )\n\n  /**\n   * buildStar\n   * @param {*} props\n   */\n  const buildStar = useCallback(\n    ({ width, height }) => {\n      try {\n        var rndStar = Math.floor(Math.random() * 6)\n        var ys = Math.floor(Math.random() * height)\n        var xs = Math.floor(Math.random() * width)\n        if (\n          ys + 1 > height - 1 ||\n          ys - 1 < 0 ||\n          xs + 1 > width - 1 ||\n          xs - 1 < 0\n        ) {\n          field.current[ys][xs] = ds\n        } else {\n          switch (rndStar) {\n            case 0:\n              //  |\n              // -o-\n              //  |\n              field.current[ys][xs] = 'o'\n              field.current[ys + 1][xs] = '|'\n              field.current[ys - 1][xs] = '|'\n              field.current[ys][xs + 1] = '-'\n              field.current[ys][xs - 1] = '-'\n              break\n            case 1:\n              field.current[ys][xs] = '.'\n              break\n            case 2:\n              field.current[ys][xs] = `'`\n              break\n            case 3:\n              field.current[ys][xs] = '~'\n              field.current[ys][xs + 1] = '°'\n              break\n            case 4:\n              field.current[ys][xs] = ','\n              break\n            case 5:\n              field.current[ys][xs] = '+'\n              break\n            default:\n              field.current[ys][xs] = '*'\n              break\n          }\n        }\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    [field, ds]\n  )\n\n  /**\n   * render\n   * @returns\n   */\n  const render = useCallback(\n    ({ width, height }) => {\n      let _galaxy = ''\n      for (var y = 0; y < height; y++) {\n        if (!y == 0) _galaxy += '\\n'\n        for (var x = 0; x < width; x++) {\n          _galaxy += field.current[y][x]\n        }\n      }\n      return _galaxy\n    },\n    [field]\n  )\n\n  useLayoutEffect(() => {\n    if (!galaxy && _width && _height) {\n      // let width = tWidth || _width;\n      // let height = tHeight || _height;\n      let width = scaleValue(tWidth || _width, [0, tWidth || _width], [30, 200])\n      let height = scaleValue(\n        tHeight || _height,\n        [0, tHeight || _height],\n        [10, 50]\n      )\n\n      createField({ width, height })\n\n      for (var i = 0; i < trails; i++) {\n        buildTrail({ width, height })\n      }\n\n      for (var i = 0; i < stars; i++) {\n        buildStar({ width, height })\n      }\n\n      const data = render({ width, height })\n      setGalaxy(data)\n    }\n  }, [\n    galaxy,\n    ds,\n    field,\n    buildStar,\n    buildTrail,\n    createField,\n    render,\n    tHeight,\n    tWidth,\n    _height,\n    _width,\n    stars,\n    trails,\n  ])\n\n  // useEffect(() => {\n  //   const int = setInterval(() => setGalaxy(null), 2000);\n\n  //   return () => clearInterval(int);\n  // }, []);\n\n  return (\n    <Tag\n      className={`${s.a_s_c_i_i_galaxy} ${\n        s[`a_s_c_i_i_galaxy__${variant}`]\n      } ${className}`}\n    >\n      <code>{`${galaxy}`}</code>\n    </Tag>\n  )\n}\n\nASCIIGalaxy.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nexport default ASCIIGalaxy\n"],"names":["scaleValue","__name","value","from","to","scale","capped","Math","min","max","ASCIIGalaxy","tagName","Tag","className","variant","width","tWidth","height","tHeight","stars","trails","ds","_height","_width","useWindowSize","galaxy","setGalaxy","useState","field","useRef","createField","useCallback","y","current","x","buildTrail","symbols","ys","floor","random","xs","len","yc","i","rndSym","length","rndY","e","console","log","err","error","buildStar","rndStar","render","_galaxy","useLayoutEffect","data","s","a_s_c_i_i_galaxy","propTypes","PropTypes","string","oneOf","children","node","ASCIIGalaxy$1"],"mappings":"6mBAuBAA,EAAAC,EAAA,CAAAC,EAAAC,EAAAC,IAAA,CACA,IAAAC,GAAAD,EAAA,GAAAA,EAAA,KAAAD,EAAA,GAAAA,EAAA,IACAG,EAAAC,KAAAC,IAAAL,EAAA,GAAAI,KAAAE,IAAAN,EAAA,GAAAD,CAAA,CAAA,EAAAC,EAAA,GACA,MAAA,CAAA,EAAAG,EAAAD,EAAAD,EAAA,GACA,EAJA,cAMAM,EAAAT,EAAA,CAAA,CACAU,QAAAC,EAAA,MACAC,UAAAA,EAAA,2HACAC,QAAAA,EAAA,UACAC,MAAAC,EACAC,OAAAC,EACAC,MAAAA,EAAA,GACAC,OAAAA,EAAA,GACAC,GAAAA,EAAA,GACA,IAAA,CACA,KAAA,CAAAJ,OAAAK,EAAAP,MAAAQ,GAAAC,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,mBAAA,EAAA,EAEAC,EAAAC,iBAAA,CAAA,CAAA,EAKAC,EAAAC,EAAAA,QAAAA,YACA,CAAA,CAAAhB,MAAAA,EAAAE,OAAAA,CAAAA,IAAA,CACA,QAAAe,EAAA,EAAAA,EAAAf,EAAAe,IAAA,CACAC,EAAAA,QAAAD,GAAA,GACA,QAAAE,EAAA,EAAAA,EAAAnB,EAAAmB,IACAD,EAAAA,QAAAD,GAAAE,GAAAb,CAEA,CAAA,EAEA,CAAAO,EAAAP,CAAA,CAAA,EAQAc,EAAAJ,EAAAA,QAAAA,YACA,CAAA,CAAAhB,MAAAA,EAAAE,OAAAA,EAAAmB,QAAAA,EAAA,CAAA,IAAA,IAAA,IAAA,IAAA,OAAA,GAAA,CAAA,IAAA,CACA,GAAA,CAMA,QALAC,EAAA9B,KAAA+B,MAAA/B,KAAAgC,OAAAA,EAAAtB,CAAA,EACAuB,EAAAjC,KAAA+B,MAAA/B,KAAAgC,OAAAA,EAAAxB,CAAA,EACA0B,EAAAlC,KAAA+B,MAAA/B,KAAAgC,UAAAxB,EAAAyB,EAAA,GAAA,CAAA,EACAE,EAAA,EAEAC,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAC,EAAArC,KAAA+B,MAAA/B,KAAAgC,SAAAH,EAAAS,MAAA,EACAC,EAAAvC,KAAA+B,MAAA/B,KAAAgC,UAAA,EAAA,EAAA,EAAA,EAAA,EASA,GARAO,GAAA,EACAJ,GAAA,EACAI,GAAA,EACAJ,GAAA,EAEAA,EAAAA,EAGAL,EAAAK,EAAAzB,GAAAoB,EAAAK,EAAA,EAAA,OACA,GAAA,CACAd,EAAAK,QAAAI,EAAAK,GAAAF,EAAAG,GAAAP,EAAAQ,SACAG,GACAC,QAAAC,IAAAF,CAAA,CACA,CACA,QACAG,GACAF,QAAAG,MAAAD,CAAA,CACA,CAAA,EAEA,CAAAtB,CAAA,CAAA,EAOAwB,EAAArB,EAAAA,QAAAA,YACA,CAAA,CAAAhB,MAAAA,EAAAE,OAAAA,CAAAA,IAAA,CACA,GAAA,CACA,IAAAoC,EAAA9C,KAAA+B,MAAA/B,KAAAgC,OAAAA,EAAA,CAAA,EACAF,EAAA9B,KAAA+B,MAAA/B,KAAAgC,OAAAA,EAAAtB,CAAA,EACAuB,EAAAjC,KAAA+B,MAAA/B,KAAAgC,OAAAA,EAAAxB,CAAA,EACA,GACAsB,EAAA,EAAApB,EAAA,GACAoB,EAAA,EAAA,GACAG,EAAA,EAAAzB,EAAA,GACAyB,EAAA,EAAA,EAEAP,EAAAA,QAAAI,GAAAG,GAAAnB,MAEA,QAAAgC,EAAA,CACA,IAAA,GAIApB,EAAAA,QAAAI,GAAAG,GAAA,IACAP,EAAAA,QAAAI,EAAA,GAAAG,GAAA,IACAP,EAAAA,QAAAI,EAAA,GAAAG,GAAA,IACAP,EAAAA,QAAAI,GAAAG,EAAA,GAAA,IACAP,EAAAA,QAAAI,GAAAG,EAAA,GAAA,IACA,MACA,IAAA,GACAP,EAAAA,QAAAI,GAAAG,GAAA,IACA,MACA,IAAA,GACAP,EAAAA,QAAAI,GAAAG,GAAA,IACA,MACA,IAAA,GACAP,EAAAA,QAAAI,GAAAG,GAAA,IACAP,EAAAA,QAAAI,GAAAG,EAAA,GAAA,OACA,MACA,IAAA,GACAP,EAAAA,QAAAI,GAAAG,GAAA,IACA,MACA,IAAA,GACAP,EAAAA,QAAAI,GAAAG,GAAA,IACA,MACA,QACAP,EAAAA,QAAAI,GAAAG,GAAA,IACA,KAAA,QAGAU,GACAF,QAAAG,MAAAD,CAAA,CACA,CAAA,EAEA,CAAAtB,EAAAP,CAAA,CAAA,EAOAiC,EAAAvB,EAAAA,QAAAA,YACA,CAAA,CAAAhB,MAAAA,EAAAE,OAAAA,CAAAA,IAAA,CACA,IAAAsC,EAAA,GACA,QAAAvB,EAAA,EAAAA,EAAAf,EAAAe,IAAA,CACA,CAAAA,GAAA,IAAAuB,GAAA;AAAA,GACA,QAAArB,EAAA,EAAAA,EAAAnB,EAAAmB,IACAN,GAAAA,EAAAK,QAAAD,GAAAE,EAEA,CACAqB,OAAAA,CAAAA,EAEA,CAAA3B,CAAA,CAAA,EAGA4B,OAAAA,EAAA,IAAA,CACA,GAAA,CAAA/B,GAAAF,GAAAD,EAAA,CAGA,IAAAP,EAAAf,EAAAgB,GAAAO,EAAA,CAAA,EAAAP,GAAAO,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,EACAN,EAAAjB,EACAkB,GAAAI,EACA,CAAA,EAAAJ,GAAAI,CAAA,EACA,CAAA,GAAA,EAAA,CAAA,EAGAQ,EAAA,CAAAf,MAAAA,EAAAE,OAAAA,CAAAA,CAAA,EAEA,QAAA0B,EAAA,EAAAA,EAAAvB,EAAAuB,IACAR,EAAA,CAAApB,MAAAA,EAAAE,OAAAA,CAAAA,CAAA,EAGA,QAAA0B,EAAA,EAAAA,EAAAxB,EAAAwB,IACAS,EAAA,CAAArC,MAAAA,EAAAE,OAAAA,CAAAA,CAAA,EAGA,MAAAwC,EAAAH,EAAA,CAAAvC,MAAAA,EAAAE,OAAAA,CAAAA,CAAA,EACAS,EAAA+B,CAAA,CACA,CAAA,EACA,CACAhC,EACAJ,EACAO,EACAwB,EACAjB,EACAL,EACAwB,EACApC,EACAF,EACAM,EACAC,EACAJ,EACAC,CAAA,CACA,IASAR,EAAA,CACA,UAAA,GAAA8C,EAAAC,oBACAD,EAAA,qBAAA5C,QACAD,IAAA,WAEA,OAAA,CAAA,SAAA,GAAAY,GAAAA,CAAA,CAAA,CACA,CAEA,EAtMA,eAwMAf,EAAAkD,UAAA,CACAjD,QAAAkD,EAAAC,QAAAA,OACAjD,UAAAgD,EAAAC,QAAAA,OACAhD,QAAA+C,EAAAA,QAAAE,MAAA,CAAA,SAAA,CAAA,EACAC,SAAAH,EAAAI,QAAAA,IACA,EAEA,MAAAC,EAAAxD;;;;;;;;;;;;;;;;;;;;"}