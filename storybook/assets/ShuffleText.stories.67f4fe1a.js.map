{"version":3,"file":"ShuffleText.stories.67f4fe1a.js","sources":["../../node_modules/.pnpm/classnames@2.3.2/node_modules/classnames/index.js","../../src/components/ShuffleText/ShuffleText.jsx"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","/**\n * @file ShuffleText.js\n */\nimport { useState, useRef, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { useLayoutEffect } from '@fomolol/tacklebox'\n\nimport s from './ShuffleText.module.css'\n\nconst ShuffleText = ({\n  tagName: Tag = 'h2',\n  className = 'text-white transition-all duration-1000 ease-out font-stolzl hover:text-purple-400',\n  variant = 'default',\n  defaultText,\n  hoverText,\n  characters: _characters = '█▅▉▄▋▃▋▓▔▛▟▞▝▜▕▒▐',\n}) => {\n  const [targetText, setTargetText] = useState(defaultText)\n  const [randomString, setRandomString] = useState(defaultText)\n\n  const characters = useRef(_characters)\n  const currentLength = useRef(0)\n  const infoArray = useRef([])\n\n  /**\n   * generateRandomString\n   * Generates an initial random string to be used as the target text.\n   */\n  const generateRandomString = useCallback(() => {\n    let string = ''\n    while (string.length < currentLength.current) {\n      string += characters.current.charAt(\n        Math.floor(Math.random() * characters.current.length)\n      )\n    }\n    setRandomString(string)\n  }, [])\n\n  /**\n   * animateFadeBuffer\n   * Generates a random string of the same length as the target text.\n   */\n  const animateFadeBuffer = useCallback(() => {\n    if (!infoArray.current.length) {\n      infoArray.current = []\n\n      for (let i = 0; i < targetText.length; i++) {\n        infoArray.current.push({\n          countdown: Math.floor(Math.random() * 12) + 1,\n          correctLetter: targetText.charAt(i),\n        })\n      }\n    }\n\n    let useRandomCharacter = false\n    let string = ''\n\n    for (let i = 0; i < infoArray.current.length; i++) {\n      let fader = infoArray.current[i]\n\n      if (fader.countdown > 0) {\n        useRandomCharacter = true\n\n        fader.countdown--\n\n        string += characters.current.charAt(\n          Math.floor(Math.random() * characters.current.length)\n        )\n      } else {\n        string += fader.correctLetter\n      }\n    }\n\n    setRandomString(string)\n\n    if (useRandomCharacter === true) {\n      setTimeout(animateFadeBuffer, 50)\n    } else {\n      currentLength.current = 0\n      infoArray.current = []\n    }\n  }, [targetText])\n\n  /**\n   * animateIn\n   * Sets the target text to the hover text.\n   */\n  const animateIn = useCallback(() => {\n    if (currentLength.current < targetText.length) {\n      currentLength.current += 2\n\n      if (currentLength.current > targetText.length) {\n        currentLength.current = targetText.length\n      }\n\n      generateRandomString()\n\n      setTimeout(animateIn, 20)\n    } else {\n      setTimeout(animateFadeBuffer, 20)\n    }\n  }, [animateFadeBuffer, generateRandomString, targetText])\n\n  useLayoutEffect(() => {\n    animateIn()\n  }, [animateIn])\n\n  return (\n    <Tag\n      className={classNames(className, { hoverFont: targetText === hoverText })}\n      onMouseEnter={() => setTargetText(hoverText)}\n      onMouseLeave={() => setTargetText(defaultText)}\n    >\n      {randomString}\n    </Tag>\n  )\n}\n\nShuffleText.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nexport default ShuffleText\n"],"names":["hasOwn","classNames","classes","i","arg","argType","inner","key","__name","module","ShuffleText","tagName","Tag","className","variant","defaultText","hoverText","characters","_characters","targetText","setTargetText","useState","randomString","setRandomString","useRef","currentLength","infoArray","generateRandomString","useCallback","string","length","current","charAt","Math","floor","random","animateFadeBuffer","push","countdown","correctLetter","useRandomCharacter","fader","setTimeout","animateIn","useLayoutEffect","hoverFont","propTypes","PropTypes","oneOf","children","node","ShuffleText$1"],"mappings":"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"}