{"version":3,"file":"SpinningLoader.stories.32371258.js","sources":["../../src/components/SpinningLoader/SpinningLoader.jsx"],"sourcesContent":["/**\n * @file SpinningLoader.js\n * @see https://codepen.io/hakimel/pen/KanIi?editors=0010\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode\n */\nimport { useEffect, useCallback, useRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useCanvas, useEventListener, useMouse } from '@fomolol/tacklebox'\n\nimport styles from './SpinningLoader.module.css'\n\nlet SCREEN_WIDTH, SCREEN_HEIGHT\nconst RADIUS = 70\n\nlet RADIUS_SCALE = 1\nconst RADIUS_SCALE_MIN = 1\nconst RADIUS_SCALE_MAX = 1.5\n\nconst QUANTITY = 25\n\n/**\n * createParticles\n * @param {object} mouse\n * @return {array}\n */\nconst createParticles = (mouse) => {\n  const particles = []\n\n  const { x, y } = useMouse()\n\n  for (var i = 0; i < QUANTITY; i++) {\n    var particle = {\n      size: 1,\n      position: { x, y },\n      offset: { x: 0, y: 0 },\n      shift: { x, y },\n      speed: 0.01 + Math.random() * 0.04,\n      targetSize: 1,\n      fillColor: '#' + ((Math.random() * 0x19e68c + 0xf59b23) | 0).toString(16),\n      orbit: RADIUS * 0.5 + RADIUS * 0.5 * Math.random(),\n    }\n\n    particles.push(particle)\n  }\n  return particles\n}\n\n/**\n * loop\n * @param {array} particles\n * @param {object} mouse\n * @param {bool} transparent is whether the background is transparent\n * @param {object} ctx\n * @return void\n */\nconst loop =\n  (particles, mouse, transparent = false) =>\n  (ctx) => {\n    let { x, y, clientX, clientY, screenX, screenY, isDown } = mouse\n    if (!clientX || !clientY) {\n      x = window.innerWidth - SCREEN_WIDTH * 0.5\n      y = window.innerHeight - SCREEN_HEIGHT * 0.5\n    } else {\n      x = clientX - (window.innerWidth - SCREEN_WIDTH) * 0.5\n      y = clientY - (window.innerHeight - SCREEN_HEIGHT) * 0.5\n    }\n\n    if (isDown) {\n      RADIUS_SCALE += (RADIUS_SCALE_MAX - RADIUS_SCALE) * 0.02\n    } else {\n      RADIUS_SCALE -= (RADIUS_SCALE - RADIUS_SCALE_MIN) * 0.02\n    }\n\n    RADIUS_SCALE = Math.min(RADIUS_SCALE, RADIUS_SCALE_MAX)\n    if (!transparent) {\n      // ctx.globalCompositeOperation = 'exclusion'\n      ctx.fillStyle = 'rgba(0,0,0,0.05)'\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n      // ctx.globalCompositeOperation = 'overlay'\n    } else {\n      // ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)\n    }\n\n    for (let i = 0, len = particles.length; i < len; i++) {\n      var particle = particles[i]\n\n      var lp = { x: particle.position.x, y: particle.position.y }\n\n      // Rotation\n      particle.offset.x += particle.speed\n      particle.offset.y += particle.speed\n\n      // Follow mouse with some lag\n      particle.shift.x += (x - particle.shift.x) * particle.speed\n      particle.shift.y += (y - particle.shift.y) * particle.speed\n\n      // Apply position\n      particle.position.x =\n        particle.shift.x +\n        Math.cos(i + particle.offset.x) * (particle.orbit * RADIUS_SCALE)\n      particle.position.y =\n        particle.shift.y +\n        Math.sin(i + particle.offset.y) * (particle.orbit * RADIUS_SCALE)\n\n      // Limit to screen bounds\n      particle.position.x = Math.max(\n        Math.min(particle.position.x, SCREEN_WIDTH),\n        0\n      )\n      particle.position.y = Math.max(\n        Math.min(particle.position.y, SCREEN_HEIGHT),\n        0\n      )\n\n      particle.size += (particle.targetSize - particle.size) * 0.05\n\n      if (Math.round(particle.size) == Math.round(particle.targetSize)) {\n        particle.targetSize = 1 + Math.random() * 7\n      }\n\n      ctx.beginPath()\n      ctx.fillStyle = particle.fillColor\n      ctx.strokeStyle = particle.fillColor\n      ctx.lineWidth = particle.size\n      ctx.moveTo(lp.x, lp.y)\n      ctx.lineTo(particle.position.x, particle.position.y)\n      ctx.stroke()\n      ctx.arc(\n        particle.position.x,\n        particle.position.y,\n        particle.size / 2,\n        0,\n        Math.PI * 2,\n        true\n      )\n      ctx.fill()\n    }\n  }\n\nconst SpinningLoader = ({\n  tagName: Tag,\n  className,\n  variant,\n  enterDelay = 100,\n  leaveDelay = 100,\n}) => {\n  const container = useRef()\n\n  const mouse = useMouse(container, {\n    enterDelay,\n    leaveDelay,\n  })\n\n  // Event handler utilizing useCallback ...\n  // ... so that reference never changes.\n  // const mouseMoveHandler = useCallback(\n  //   ({ clientX, clientY }) => {\n  //     // setMouse({\n  //     //   isDown: mouseDetails.isDown,\n  //     //   x: clientX - (window.innerWidth - SCREEN_WIDTH) * 0.5,\n  //     //   y: clientY - (window.innerHeight - SCREEN_HEIGHT) * 0.5,\n  //     // })\n  //   },\n  //   [mouse]\n  // )\n\n  // TODO: Maybe add these later.\n  const touchStartHandler = useCallback(({ touches, preventDefault }) => {\n    if (touches.length == 1) {\n      preventDefault()\n\n      // setMouse({\n      //   isDown: mouseDetails.isDown,\n      //   x: touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * 0.5,\n      //   y: touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * 0.5,\n      // })\n    }\n  }, [])\n\n  const touchMoveHandler = useCallback(({ touches, preventDefault }) => {\n    if (touches.length == 1) {\n      preventDefault()\n\n      // setMouse({\n      //   isDown: mouseDetails.isDown,\n      //   x: touches[0].pageX - (window.innerWidth - SCREEN_WIDTH) * 0.5,\n      //   y: touches[0].pageY - (window.innerHeight - SCREEN_HEIGHT) * 0.5,\n      // })\n    }\n  }, [])\n\n  const windowResizeHandler = useCallback(() => {\n    SCREEN_WIDTH = window.innerWidth\n    SCREEN_HEIGHT = window.innerHeight\n\n    canvasRef.current.width = SCREEN_WIDTH\n    canvasRef.current.height = SCREEN_HEIGHT\n  }, [canvasRef])\n\n  //   // Add event listener using our hook\n  // useEventListener('mousemove', mouseMoveHandler)\n  // useEventListener('touchstart', touchStartHandler)\n  // useEventListener('touchmove', touchMoveHandler)\n  useEventListener('resize', windowResizeHandler)\n\n  useEffect(() => {\n    // Set the global screen dimensions\n    SCREEN_WIDTH = window.innerWidth\n    SCREEN_HEIGHT = window.innerHeight\n    canvasRef.current.width = SCREEN_WIDTH\n    canvasRef.current.height = SCREEN_HEIGHT\n    // console.log('particles', particles)\n  }, [])\n\n  const particles = useMemo(() => createParticles(mouse), [])\n\n  const canvasRef = useCanvas(loop(particles, mouse))\n\n  // useEffect(() => {\n  //   const ctx = canvasRef.current.getContext('2d')\n  //   const interval = setInterval(() => {\n  //     console.log('Clearing the canvas')\n  //     // Update the blend mode\n  //     // @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n  //     // ctx.globalCompositeOperation = 'source-over'\n  //     // ctx.clearRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)\n  //     ctx.fillStyle = 'rgba(255,255,255,0.05)'\n  //     ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  //   }, 1000)\n  //   return () => clearInterval(interval)\n  // })\n\n  return (\n    <Tag\n      className={`${styles.spinning_loader} ${\n        styles[`spinning_loader__${variant}`]\n      } ${className}`}\n      ref={container}\n    >\n      <canvas\n        style={{\n          backgroundColor: 'transparent',\n          width: '100vw',\n          height: '100vh',\n        }}\n        ref={canvasRef}\n      />\n    </Tag>\n  )\n}\n\nSpinningLoader.propTypes = {\n  tagName: PropTypes.string,\n  className: PropTypes.string,\n  variant: PropTypes.oneOf(['default']),\n  children: PropTypes.node,\n}\n\nSpinningLoader.defaultProps = {\n  tagName: 'div',\n  className: 'absolute z-40 top-0 bg-black w-screen h-screen ', // blend-hard-light\n  variant: 'default',\n  children: '',\n}\n\nexport default SpinningLoader\n"],"names":["SCREEN_WIDTH","SCREEN_HEIGHT","RADIUS","RADIUS_SCALE","RADIUS_SCALE_MIN","RADIUS_SCALE_MAX","QUANTITY","createParticles","mouse","particles","x","y","useMouse","i","particle","size","position","offset","shift","speed","Math","random","targetSize","fillColor","toString","orbit","push","loop","__name","transparent","ctx","clientX","clientY","screenX","screenY","isDown","window","innerWidth","innerHeight","min","fillStyle","fillRect","canvas","width","height","len","length","lp","cos","sin","max","round","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","arc","PI","fill","SpinningLoader","tagName","Tag","className","variant","enterDelay","leaveDelay","container","useRef","useCallback","touches","preventDefault","windowResizeHandler","canvasRef","current","useEventListener","useEffect","useMemo","useCanvas","styles","spinning_loader","backgroundColor","propTypes","PropTypes","string","oneOf","children","node","defaultProps","SpinningLoader$1"],"mappings":"gnBAWA,IAAAA,EAAAC,EACA,MAAAC,EAAA,GAEA,IAAAC,EAAA,EACA,MAAAC,EAAA,EACAC,EAAA,IAEAC,EAAA,GAOAC,EAAAC,EAAAA,GAAA,CACA,MAAAC,EAAA,CAAA,EAEA,CAAAC,EAAAA,EAAAC,EAAAA,GAAAC,EAAA,EAEA,QAAAC,EAAA,EAAAA,EAAAP,EAAAO,IAAA,CACA,IAAAC,EAAA,CACAC,KAAA,EACAC,SAAA,CAAAN,EAAAA,EAAAC,EAAAA,CAAA,EACAM,OAAA,CAAAP,EAAA,EAAAC,EAAA,CAAA,EACAO,MAAA,CAAAR,EAAAA,EAAAC,EAAAA,CAAA,EACAQ,MAAA,IAAAC,KAAAC,OAAA,EAAA,IACAC,WAAA,EACAC,UAAA,KAAAH,KAAAC,OAAAA,EAAA,QAAA,SAAA,GAAAG,SAAA,EAAA,EACAC,MAAAvB,EAAA,GAAAA,EAAA,GAAAkB,KAAAC,OAAA,CAAA,EAGAZ,EAAAiB,KAAAZ,CAAA,CACA,CACAL,OAAAA,CACA,EApBAD,mBA8BAmB,EACAC,EAAA,CAAAnB,EAAAD,EAAAqB,EAAA,KACAC,GAAA,CACA,GAAA,CAAApB,EAAAA,EAAAC,EAAAA,EAAAoB,QAAAA,EAAAC,QAAAA,EAAAC,QAAAA,EAAAC,QAAAA,EAAAC,OAAAA,CAAA3B,EAAAA,EACA,CAAAuB,GAAA,CAAAC,GACAI,EAAAA,OAAAC,WAAArC,EAAA,GACAoC,EAAAA,OAAAE,YAAArC,EAAA,KAEA8B,EAAAA,GAAAK,OAAAC,WAAArC,GAAA,GACAgC,EAAAA,GAAAI,OAAAE,YAAArC,GAAA,IAGAkC,EACAhC,IAAAE,EAAAF,GAAA,IAEAA,IAAAA,EAAAC,GAAA,IAGAgB,EAAAA,KAAAmB,IAAApC,EAAAE,CAAA,EACAwB,IAEAC,EAAAU,UAAA,mBACAC,EAAAA,SAAA,EAAA,EAAAX,EAAAY,OAAAC,MAAAb,EAAAY,OAAAE,MAAA,GAMA,QAAA/B,EAAA,EAAAgC,EAAApC,EAAAqC,OAAAjC,EAAAgC,EAAAhC,IAAA,CACA,IAAAC,EAAAL,EAAAI,GAEAkC,EAAA,CAAArC,EAAAI,EAAAE,SAAAN,EAAAC,EAAAG,EAAAE,SAAAL,CAAAA,EAGAM,EAAAA,OAAAP,GAAAI,EAAAK,MACAF,EAAAA,OAAAN,GAAAG,EAAAK,MAGAL,EAAAI,MAAAR,IAAAA,EAAAI,EAAAI,MAAAR,GAAAI,EAAAK,MACAL,EAAAI,MAAAP,IAAAA,EAAAG,EAAAI,MAAAP,GAAAG,EAAAK,MAGAL,EAAAE,SAAAN,EACAI,EAAAI,MAAAR,EACAU,KAAA4B,IAAAnC,EAAAC,EAAAG,OAAAP,CAAA,GAAAI,EAAAW,MAAAtB,GACAW,EAAAE,SAAAL,EACAG,EAAAI,MAAAP,EACAS,KAAA6B,IAAApC,EAAAC,EAAAG,OAAAN,CAAA,GAAAG,EAAAW,MAAAtB,GAGAa,EAAAA,SAAAN,EAAAU,KAAA8B,IACA9B,KAAAmB,IAAAzB,EAAAE,SAAAN,EAAAV,CAAA,EACA,CAAA,EAEAgB,EAAAA,SAAAL,EAAAS,KAAA8B,IACA9B,KAAAmB,IAAAzB,EAAAE,SAAAL,EAAAV,CAAA,EACA,CAAA,EAGAa,EAAAC,OAAAD,EAAAQ,WAAAR,EAAAC,MAAA,IAEAK,KAAA+B,MAAArC,EAAAC,IAAA,GAAAK,KAAA+B,MAAArC,EAAAQ,UAAA,IACAR,EAAAQ,WAAA,EAAAF,KAAAC,OAAAA,EAAA,GAGAS,EAAAsB,UAAA,EACAtB,EAAAU,UAAA1B,EAAAS,UACAO,EAAAuB,YAAAvC,EAAAS,UACAO,EAAAwB,UAAAxC,EAAAC,KACAe,EAAAyB,OAAAR,EAAArC,EAAAqC,EAAApC,CAAA,EACAmB,EAAA0B,OAAA1C,EAAAE,SAAAN,EAAAI,EAAAE,SAAAL,CAAA,EACAmB,EAAA2B,OAAA,EACA3B,EAAA4B,IACA5C,EAAAE,SAAAN,EACAI,EAAAE,SAAAL,EACAG,EAAAC,KAAA,EACA,EACAK,KAAAuC,GAAA,EACA,EAAA,EAEA7B,EAAA8B,KAAA,CACA,CACA,EAjFA,QAmFAC,EAAAjC,EAAA,CAAA,CACAkC,QAAAC,EACAC,UAAAA,EACAC,QAAAA,EACAC,WAAAA,EAAA,IACAC,WAAAA,EAAA,GACA,IAAA,CACA,MAAAC,EAAAC,EAAAA,QAAAA,SAEA7D,EAAAI,EAAAwD,EAAA,CACAF,WAAAA,EACAC,WAAAA,CAAAA,CACA,EAgBAG,EAAAA,QAAAA,YAAA,CAAA,CAAAC,QAAAA,EAAAC,eAAAA,CAAAA,IAAA,CACAD,EAAAzB,QAAA,GACA0B,GAQA,EAAA,EAAA,EAEAF,EAAAA,QAAAA,YAAA,CAAA,CAAAC,QAAAA,EAAAC,eAAAA,CAAAA,IAAA,CACAD,EAAAzB,QAAA,GACA0B,GAQA,EAAA,EAAA,EAEAC,MAAAA,EAAAH,EAAAA,QAAAA,YAAA,IAAA,CACAtE,EAAAoC,OAAAC,WACApC,EAAAmC,OAAAE,YAEAoC,EAAAC,QAAAhC,MAAA3C,EACA0E,EAAAC,QAAA/B,OAAA3C,CAAAA,EACA,CAAAyE,CAAA,CAAA,EAMAE,EAAA,SAAAH,CAAA,EAEAI,EAAAA,QAAAA,UAAA,IAAA,CAEA7E,EAAAoC,OAAAC,WACApC,EAAAmC,OAAAE,YACAoC,EAAAC,QAAAhC,MAAA3C,EACA0E,EAAAC,QAAA/B,OAAA3C,CAEA,EAAA,CAAA,CAAA,EAEA,MAAAQ,EAAAqE,EAAAA,QAAAA,QAAA,IAAAvE,EAAA,EAAA,CAAA,CAAA,EAEAmE,EAAAK,EAAApD,EAAAlB,EAAAD,CAAA,CAAA,EAgBA,SACAuD,EAAA,CACA,UAAA,GAAAiB,EAAAC,mBACAD,EAAA,oBAAAf,QACAD,IACA,IAAAI,EAAA,WAEA,SAAA,CACA,MAAA,CACAc,gBAAA,cACAvC,MAAA,QACAC,OAAA,OACA,EACA,IAAA8B,CAAAA,CAAA,CAAA,CAEA,CAEA,EA9GA,kBAgHAb,EAAAsB,UAAA,CACArB,QAAAsB,EAAAC,QAAAA,OACArB,UAAAoB,EAAAC,QAAAA,OACApB,QAAAmB,EAAAA,QAAAE,MAAA,CAAA,SAAA,CAAA,EACAC,SAAAH,EAAAI,QAAAA,IACA,EAEA3B,EAAA4B,aAAA,CACA3B,QAAA,MACAE,UAAA,kDACAC,QAAA,UACAsB,SAAA,EACA,EAEA,MAAAG,EAAA7B;;;;;;;;;;;;;;;;;;;;"}