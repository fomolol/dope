{"version":3,"file":"StickyButton.stories.3f3175c2.js","sources":["../../src/contexts/MenuContext/MenuContext.jsx","../../src/contexts/MenuContext/useMenuContext.js","../../src/components/StickyButton/StickyButton.jsx"],"sourcesContent":["/**\n * @file /contexts/MenuContext.js\n */\nimport { useMemo, useReducer, createContext } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const INITIAL_STATE = {\n  isMenuOpen: false,\n}\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case 'TOGGLE_MENU': {\n      return {\n        ...state,\n        isMenuOpen: !state.isMenuOpen,\n      }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nexport const MenuContext = createContext()\n\n// Create the provider\nexport const MenuProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(rootReducer, INITIAL_STATE)\n  const store = useMemo(() => ({ state, dispatch }), [state])\n  return <MenuContext.Provider value={store}>{children}</MenuContext.Provider>\n}\n\nMenuProvider.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default { MenuContext, MenuProvider }\n","/**\n * @file contexts/MenuContext/useMenu.js\n */\nimport * as React from 'react';\nimport { MenuContext } from './MenuContext';\n\nexport const useMenu = () => {\n  const { state, dispatch } = React.useContext(MenuContext);\n  return [state, dispatch];\n};\n","/**\n * @file StickyButton.js\n */\nimport { memo, forwardRef, useCallback } from 'react'\nimport { useCursorStyle } from '@fomolol/tacklebox'\n\nimport { useMenu } from '../../contexts/MenuContext/useMenuContext'\n\nimport StickyCursor from '../StickyCursor'\n\nimport s from './StickyButton.module.css'\n\nexport const MenuButton = (\n  { sticky = true, title = 'Lorem Ipsum', ...props },\n  ref\n) => {\n  const [, dispatch] = useMenu()\n  const { addCursorBorder, removeCursorBorder } = useCursorStyle()\n\n  const handleOnToggle = useCallback(() => {\n    dispatch({ type: 'TOGGLE_MENU' })\n  }, [dispatch])\n\n  return (\n    <StickyCursor sticky={sticky}>\n      <button\n        className=\"text-white dark:text-black\"\n        onMouseEnter={addCursorBorder}\n        onMouseLeave={removeCursorBorder}\n        onClick={() => {\n          handleOnToggle()\n          onClick()\n        }}\n        ref={ref}\n        {...props}\n      >\n        <span className=\"px-4 py-2 font-mono text-sm tracking-widest transition duration-500 ease-out bg-black hover:bg-accent2 active:bg-accent3 dark:bg-white\">\n          {title}\n        </span>\n      </button>\n    </StickyCursor>\n  )\n}\n\nexport default memo(forwardRef(MenuButton))\n"],"names":["MenuContext","createContext","PropTypes","node","useMenu","__name","state","dispatch","React.useContext","MenuButton","sticky","title","props","ref","addCursorBorder","removeCursorBorder","useCursorStyle","handleOnToggle","useCallback","type","StickyCursor","StickyButton","memo","forwardRef"],"mappings":"uhBAwBA,MAAAA,EAAAC,EAAA,QAAA,cAAA,EAUAC,EAAAC,QAAAA,KC5BO,MAAMC,EAAUC,EAAA,IAAM,CAC3B,KAAM,CAAE,MAAAC,EAAO,SAAAC,CAAU,EAAGC,EAAgB,QAAA,WAACR,CAAW,EACxD,MAAO,CAACM,EAAOC,CAAQ,CACzB,EAHuB,WCMvB,MAAAE,EAAAJ,EAAA,CACA,CAAAK,OAAAA,EAAA,GAAAC,MAAAA,EAAA,iBAAAC,CAAA,EACAC,IACA,CACA,KAAA,CAAAN,CAAAA,CAAA,EAAAH,IACA,CAAAU,gBAAAA,EAAAC,mBAAAA,GAAAC,EAAA,EAEAC,EAAAC,EAAAA,QAAAA,YAAA,IAAA,CACAX,EAAA,CAAAY,KAAA,aAAA,CAAA,CAAA,EACA,CAAAZ,CAAA,CAAA,EAEA,SACAa,EAAA,CAAA,OAAAV,EAAA,WACA,SAAA,CACA,UAAA,6BACA,aAAAI,EACA,aAAAC,EACA,QAAA,IAAA,CACAE,IACA,SACA,EACA,IAAAJ,EAAA,GACAD,EAAA,WAEA,OAAA,CAAA,UAAA,yIAAA,SACAD,CAAAA,CAAA,CAAA,CACA,CAAA,CAEA,CAEA,EA9BA,cAgCAU,EAAAC,eAAAC,EAAAA,QAAAA,WAAAd,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;"}